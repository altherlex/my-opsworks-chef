#!/opt/aws/opsworks/local/bin/ruby

require 'fileutils'
archive = ARGV.first
directory = archive + '.d'

format = `file #{archive}`.chomp
format_brief = `file -bi #{archive}`.chomp

if format.match(/bzip2 compressed data/)
  FileUtils.mkdir(directory)
  puts `tar xfj #{archive} -C #{directory}`
elsif format.match(/gzip compressed data/)
  FileUtils.mkdir(directory)
  puts `tar xfz #{archive} -C #{directory}`
elsif format.match(/POSIX tar archive/)
  FileUtils.mkdir(directory)
  puts `tar xf #{archive} -C #{directory}`
elsif format.match(/Zip archive data|Java .* data/) || format_brief.match(/application\/jar.*charset=binary|application\/java-archive.*charset=binary/)
  puts `unzip -d #{directory} #{archive}`
elsif format.match(/Microsoft OOXML/) && format_brief.match(/application\/octet-stream.*charset=binary/)
  puts `unzip -d #{directory} #{archive}`
elsif format.match(/XML/) && (file_content = File.read(archive)).match(/AWS (authentication|access)/i)
  puts 'The downloaded file looks like an error message wrapped in XML. Check your credentials.'
  puts file_content
  exit 1
elsif format.match(/XML/) && (file_content = File.read(archive)).match(/internal error/i)
  puts 'The download from S3 failed. See below for S3 error:'
  puts file_content
  exit 1
elsif format.match(/XML/) && (file_content = File.read(archive)).match(/SignatureDoesNotMatch/i)
  puts 'The download from S3 failed. See below for S3 error. If this is a public-read S3 item, please try switching to the HTTP type'
  puts file_content
  exit 1
elsif format.match(/XML/) && (file_content = File.read(archive)).match(/PermanentRedirect/i)
  puts 'The download from S3 failed. See below for S3 error. The bucket URL is not correct, please use the canocial version named below:'
  puts file_content
  exit 1
elsif format.match(/XML/) && (file_content = File.read(archive)).match(/\<Error\>/i)
  puts 'The download from S3 failed. See below for S3 error:'
  puts file_content
  exit 1
else
  puts "unhandled archive format '#{format}' - not extracting"
  FileUtils.mkdir(directory)
  FileUtils.mv(archive, directory)
end

FileUtils.rm_rf "#{directory}/__MACOSX"
archive_content = Dir[directory + '/*']
if archive_content.size == 1 && ::File.directory?(archive_content.first)
  Dir[archive_content.first + '/{*,.*}'].each do |child|
    unless ['.', '..'].include?(File.basename(child))
      FileUtils.mv(child, directory)
    end
  end
  FileUtils.rmdir(archive_content.first)
end

