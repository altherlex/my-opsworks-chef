#!/opt/aws/opsworks/local/bin/ruby
### BEGIN INIT INFO
# Provides:       opsworks-agent
# Required-Start:
# Required-Stop:
# Should-Start:
# Should-Stop:
# Default-Start:  2 3 4 5
# Default-Stop: 0 1 6
# Description:    Runs the OpsWorks agent
### END INIT INFO
# pidfile: /var/lib/aws/opsworks/pid/opsworks-agent.pid

# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility
unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')
require 'proxy_support'
require 'instance_agent'

include GLI::App

program_desc 'AWS OpsWorks Agent'
version InstanceAgent::VERSION

desc 'Path to agent config file'
default_value '/etc/aws/opsworks/instance-agent.yml'
arg_name '/etc/aws/opsworks/instance-agent.yml'
flag [:config_file,:config_file]

desc 'start the AWS OpsWorks instance agent'
command :start do |c|
  c.action do |global_options,options,args|
    InstanceAgent::Runner::Master.start
  end
end

desc 'stop the AWS OpsWorks instance agent'
command :stop do |c|
  c.action do |global_options,options,args|
    InstanceAgent::Runner::Master.stop
  end
end

desc 'restart the AWS OpsWorks instance agent'
command :restart do |c|
  c.action do |global_options,options,args|
    InstanceAgent::Runner::Master.restart
  end
end

desc 'Report running status of the AWS OpsWorks instance agent'
command :status do |c|
  c.action do |global_options,options,args|
    if pid = InstanceAgent::Runner::Master.status
      puts "The AWS OpsWorks agent is running as PID #{pid}"
    else
      raise 'No AWS OpsWorks agent running'
    end
  end
end

pre do |global,command,options,args|
  InstanceAgent::Config.config.keys.each do |config_key|
    InstanceAgent::Config.config(config_key => global[config_key]) if global[config_key].present?
  end

  InstanceAgent::Config.load_config
  true
end

on_error do |exception|
  true
end

exit run(ARGV)
