#!/opt/aws/opsworks/local/bin/ruby
# encoding: UTF-8

$: <<  File.expand_path( File.dirname(File.symlink?(__FILE__) ? File.readlink(__FILE__) : __FILE__ ) + '/../lib' )
require 'proxy_support'
require 'cli/runner'

include GLI::App
program_desc 'AWS OpsWorks Agent CLI'

desc 'Display an extended OpsWorks agent report'
command :agent_report do |c|
  c.action do |global_options, options, args|
    Cli::Runner.run(:cli_option => 'agent_report')
  end
end

desc 'Display an extended instance report.'
command :instance_report do |c|
  c.action do |global_options, options, args|
    Cli::Runner.run(:cli_option => 'instance_report')
  end
end

desc 'List date and activity of all locally available commands.'
command :list_commands do |c|
  c.action do |global_options, options, args|
    Cli::Runner.run(:cli_option => 'list_commands')
  end
end

desc "View a given command's log file. Default is to tail the latest log available."
long_desc <<EO_LOG_LONG_DESC
Display a locally available chef logs.

Default behaviour is to "tail" the latest log found, so the user can track the current chef run. This behaviour can be forced by using the flag '-t', if an argument is given.

If an argument is given, you can read the corresponding log starting at the bottom by using the flag '-b'.

EO_LOG_LONG_DESC
arg_name 'arg'
command :show_log do |c|
  c.desc 'go direct to the bottom of the log, only relevant if giving an argument'
  c.switch [:b, :bottom]
  c.desc 'tail the given log. Default behaviour.'
  c.switch [:t, :tail]
  c.action do |global_options, options, args|
    Cli::Runner.run(:cli_option => 'show_log', :args => args.first, :flags => options)
  end
end

desc "View a given command's json file. Default is the latest command."
arg_name 'arg'
command :get_json do |c|
  c.action do |global_options, options, args|
    Cli::Runner.run(:cli_option => 'get_json', :args => args.first)
  end
end

desc 'Run a locally available OpsWorks command for a given activity or date. Default is the latest command.'
long_desc <<EO_LONGDESC
Run a locally available OpsWorks command. Default behaviour is to use the lastest locally available command. An OpsWorks command is delivered as a JSON structure.

Possible arguments are a 'date', an 'activity' or a file. For possible values use the 'list_commands' option.

To repeat the latest chef run
 $ sudo opsworks-agent-cli run_command

To repeat the latest chef run with activity 'configure'
 $ sudo opsworks-agent-cli run_command configure

To run the command that was run at a specific time, as listed with `list_commands`
 $ sudo opsworks-agent-cli run_command '2013-02-05T10:31:55'

Cookbooks developers can run a command using a given file path containing a valid OpsWorks command. You can get an original command using the `get_json` option.
 $ sudo opsworks-agent-cli run_command -f /path/to/a/valid/json.file

This will generate a file '/path/to/a/valid/json.file.log', containig the log of the chef execution. This changes won't be tracked by OpsWorks, this option is aimed only for development use.

EO_LONGDESC
arg_name 'arg'
command :run_command do |c|
  c.desc 'trigger a chef run using a specific file. This will generate a log file using the given argument as reference.'
  c.switch [:f, :file]
  c.action do |global_options, options, args|
    Cli::Runner.run(:cli_option => 'run_command', :args => args.first, :flags => options)
  end
end

desc 'Show the current stack state as a JSON structure'
command :stack_state do |c|
  c.action do |global_options, options, args|
   Cli::Runner.run(:cli_option => 'stack_state')
  end
end

# No working right on the bootstrap code
#desc 'Update the OpsWorks agent, if possible.'
#command :update_agent do |c|
#  c.action do |global_options, options, args|
#    Cli::Runner.run(:cli_option => 'update_agent')
#  end
#end

exit run(ARGV)
